' The util namespace contains miscellaneous utility functions.

@import hof using flip, bindRight
@import generator

' Returns the minimum of the given values, according to the
' given comparator.
(def minOf(vals, cmp)
    let siz(len(vals)) =>
    (def impl(min, idx)
        => min ; idx = siz
        => impl(vals(idx), idx + 1) ; cmp(vals(idx), min)
        => impl(min, idx + 1) ; 1
    )(vals(0), 0)
)

' Returns the maximum of the given values, according to the
' given comparator.
def maxOf(vals, cmp) => minOf(vals, flip(cmp))

' Returns the minimum of the given values, according to '<'.
def min(...vals) => minOf(vals, \<\)

' Returns the maximum of a and b, according to '<'.
def max(...vals) => minOf(vals, \>\)

' Performs a binary search for the given element in the given collection
' using the given comparison function. The function should implement the
' "less than" comparison, and the collection should be sorted according
' to the comparison function. Returns the index of the element if it is
' in the collection. If the element is not in the collection, returns
' '(-idx - 1)' where 'idx' is an index where the element would be if it
' were in the collection.
(def binarySearchAs(vect, elem, cmp) =>
    (def impl(lo, hi)
        let mid((lo + hi) // 2)
        => -mid - 1 ; lo >= hi
        => impl(lo, mid) ; cmp(elem, vect(mid))
        => impl(mid + 1, hi) ; cmp(vect(mid), elem)
        => mid ; 1
    )(0, len(vect))
)

' Performs a binary search using the global comparison function '<'.
' See binarySearchAs for details of the search.
def binarySearch(vect, elem) => binarySearchAs(vect, elem, \<\)

' Returns an object that represents the set defined by the given function.
' The expression 'x in SetOf(func)' will return true if and only if 'func(x)'
' returns true.
(def SetOf(func) =>
    (def obj(a)
        => __yes__ ; a = __object__
        => func ; a = .in
    )
)

' Returns a function that tests elements against the given set. The expression
' '[Filter(set)](elem)' will return true if and only if 'elem in set' returns true.
def Filter(set) => def impl(a) => a in set

' An object representing a pair of elements.
(def Pair(a, b) =>
    (def obj(c)
        => __yes__ ; c = __object__
        => a ; c = 0
        => b ; c = 1
        => 2 ; c = .len
        => str(a) ++ " -> " ++ str(b) ; c = .str
        => (def(f) => Pair(f(a), f(b))) ; c = .map
        => (def(id, f) => f(f(id, a), b)) ; c = .fold
        => { a, b } ; c = .toVect
    )
)

' Creates a generator whose values are defined over the half open
' range [a, b) with the given increment `inc` between consecutive elements.
(def range(start, stop, inc) =>
    generator:rangeOf(start, bindRight(\<\, stop), bindRight(\+\, inc))
)

' Creates a generator whose values are the elements of the closed
' range [a, b].
def i_to(a, b) => range(a, b + 1, 1)

' Creates a generator whose values are the elements of the half open
' range [a, b).
def i_until(a, b) => range(a, b, 1)
