' The util namespace contains miscellaneous utility functions.

@import global
@using global

' Returns the minimum of a and b, according to '<'.
(def min(a, b)
    => a ; a < b
    => b ; 1
)

' Returns the maximum of a and b, according to '<'.
(def max(a, b)
    => b ; a < b
    => a ; 1
)

' Performs a binary search for the given element in the given collection
' using the given comparison function. The function should implement the
' "less than" comparison, and the collection should be sorted according
' to the comparison function. Returns the index of the element if it is
' in the collection. If the element is not in the collection, returns
' '(-idx - 1)' where 'idx' is an index where the element would be if it
' were in the collection.
(def binarySearchAs(vect, elem, cmp) =>
    [def impl(lo, hi)
        let mid(sys:__floor__((lo + hi) / 2))
        => -mid - 1 ; lo >= hi
        => impl(lo, mid) ; cmp(elem, vect(mid))
        => impl(mid + 1, hi) ; cmp(vect(mid), elem)
        => mid ; 1
    ](0, len(vect))
)

' Performs a binary search using the global comparison function '<'.
' See binarySearchAs for details of the search.
def binarySearch(vect, elem) => binarySearchAs(vect, elem, \<\)

' Returns an object that represents the set defined by the given function.
' The expression 'x in SetOf(func)' will return true if and only if 'func(x)'
' returns true.
(def SetOf(func) =>
    (def obj(a)
        => __yes__ ; a = __object__
        => func ; a = \in\
    )
)

' Returns a function that tests elements against the given set. The expression
' '[Filter(set)](elem)' will return true if and only if 'elem in set' returns true.
def Filter(set) => def impl(a) => a in set

' An object representing a pair of elements.
(def Pair(a, b) =>
    (def obj(c)
        => __yes__ ; c = __object__
        => a ; c = 0
        => b ; c = 1
        => 2 ; c = \len
        => str(a) + " -> " + str(b) ; c = \str
        => (def(f) => Pair(f(a), f(b))) ; c = \map\
        => (def(id, f) => f(f(id, a), b)) ; c = \fold\
        => Vect(a, b) ; c = \toVect\
    )
)

' Returns the curried form of the given binary function.
def curry(binaryop) => def left(a) => def right(b) => binaryop(a, b)

' Returns the uncurried form of the given curried binary function.
def uncurry(curried) => def impl(a, b) => curried(a)(b)

' Returns a function that reverses the arguments to 'binaryop', passing
' the first as the second and the second as the first.
def flip(binaryop) => def impl(a, b) => binaryop(b, a)
