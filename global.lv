' The global namespace contains the basic essential functions of Lavender.
' These include the bool values, logical operators, mathematical operators,
' comparison operators, and conversion functions. Many of these functions
' wrap and extend the intrinsic functions of the sys namespace, and should
' be preferred to them.

' The bool value 'true'.
def true() => 1

' The bool value 'false'.
def false() => 0

' Alternative spelling of 'true'.
def rest() => 1

' The value passed by forwarding functions to determine if a function is
' object-like. Object-like functions should return the value __yes__ when
' passed this value.
def __object__() => def value(a) => sys:undefined

' The value forwarding functions test against to determine if a function is
' object-like. Object-like functions should return this value when passed
' the value __object__.
def __yes__() => def value(a) => sys:undefined

' Returns whether the argument is object-like. A function is object-like
' if and only if the value __object__ maps to the value __yes__.
def isObject(a) => sys:__eq__(a(__object__), __yes__)

' Returns the logical NOT of the argument
' after conversion to bool.
(def !(a)
    => 0 ; bool(a)
    => 1 ; 1
)

' Returns the logical AND of the arguments
' after converting both to bool. This function
' short-circuits the result if possible.
(def i_&&(a, => b)
    => bool(b) ; bool(a)
    => 0 ; 1
)

' Non-short-circuiting version of '&&'.
def i_&(a, b) => a && b

' Returns the logical OR of the arguments
' after converting both to bool. This function
' short-circuits the result if possible.
(def i_||(a, => b)
    => 1 ; bool(a)
    => bool(b) ; 1
)

' Non-short-circuiting version of '||'.
def i_|(a, b) => a || b

' Returns the logical XOR of the arguments
' after converting both to bool.
def i_^(a, b) => !sys:__eq__(bool(a), bool(b))

' Returns the result of 'expr' if 'pred' is true, returns undefined otherwise.
' If 'expr' is undefined then this function still returns undefined.
def i_onlyIf(=> expr, pred) => expr ; pred

' Returns 'expr' if it is defined, 'fall' otherwise.
(def i_else(expr, => fall)
    => expr ; sys:defined(expr)
    => fall ; 1
)

' Returns 'a' if 'cond' is true, else returns 'b'.
(def i_?:(cond, => a, => b)
    => a ; cond
    => b ; 1
)

' Equality function. Forwards if equality is defined for both
' arguments. Equality should be reflexive*, symmetric, and
' transitive for all pairs of values (a, b). The default definition
' returns true in the following conditions:
'   - If one argument is undefined, returns whether the other is undefined.
'   - If both arguments are numbers, returns whether they are the same.
'   - If both arguments are strings, returns whether they are the same.
'   - If both arguments are functions, returns whether they both have
'     the same name and their captured values are equal, applying this
'     definition recursively.
'   - Else, returns false.
'
' Note that, unlike other languages, Lavender compares by value,
' so overriding the default definition should be a rare occurrence.
'
' * The only value which breaks reflexivity is the floating point
'   NaN value.
(def i_=(a, b)
    => a(\=\)(b) ; sys:defined((a onlyIf isObject(a))(\=\))
                    && sys:defined((b onlyIf isObject(b))(\=\))
    => sys:__eq__(a, b) ; 1
)

' Returns !(a = b)
def i_!=(a, b) => !(a = b)

' Less than function. Forwards if less than is defined for both arguments.
' The comparision functions impose a total ordering on all values in Lavender
' as follows:
'   - If both arguments are numbers, compares mathematically*.
'   - If both arguments are strings, compares lexicographically.
'   - If both arguments are functions, compares the base functions
'     using an arbitrary, but consistent ordering.
'     If the base functions are equal, they compare the same as their first differing
'     capture value, applying this definition recursively.
'   - Else applies an arbitrary ordering from least to greatest based on the
'     objects' type.
'
' * NaN always compares false with anything, even itself.
(def i_<(a, b)
    => a(\<\)(b) ; sys:defined((a onlyIf isObject(a))(\<\))
                && sys:defined((b onlyIf isObject(b))(\<\))
    => sys:__lt__(a, b) ; 1
)

' Greater than or equal comparision function.
(def i_>=(a, b)
    ' We do this because NaN always compares false.
    => !(a(\<\)(b)) ; sys:defined((a onlyIf isObject(a))(\<\))
                    && sys:defined((b onlyIf isObject(b))(\<\))
    => sys:__ge__(a, b) ; 1
)

' Greater than comparision function.
def i_>(a, b) => b < a

' Less than or equal to comparison function.
def i_<=(a, b) => b >= a

' Converts argument to a string. Forwards if possible.
def str(a) => (a onlyIf isObject(a))(\str) else sys:__str__(a)

' Converts argument to number. Forwards if possible.
def num(a) => (a onlyIf isObject(a))(\num) else sys:__num__(a)

' Converts the argument to bool. Forwards if possible.
def bool(a) => (a onlyIf isObject(a))(\bool) else sys:__bool__(a)

' Returns the length of the argument. Forwards if possible.
' For strings, returns the length. For functions, returns the arity.
' For numbers, returns undefined.
def len(a) => (a onlyIf isObject(a))(\len) else sys:__len__(a)

' Unary + function. Forwards if defined for its argument.
' This is a no-op for numbers, but returns undefined
' if the argument is not a number.
def +(a) => (a onlyIf isObject(a))(\+) else sys:__pos__(a)

' Negation function. Forwards if negation is defined for
' its argument.
def -(a) => (a onlyIf isObject(a))(\-) else sys:__neg__(a)

' Addition function. Forwards if addition is defined for both
' arguments.
(def i_+(a, b)
    => a(\+\)(b) ; sys:defined((a onlyIf isObject(a))(\+\))
                && sys:defined((b onlyIf isObject(b))(\+\))
    => sys:__add__(a, b) ; 1
)

' Subtraction function. Forwards if subtraction is defined for
' both arguments.
(def i_-(a, b)
    => a(\-\)(b) ; sys:defined((a onlyIf isObject(a))(\-\))
                && sys:defined((b onlyIf isObject(b))(\-\))
    => sys:__sub__(a, b) ; 1
)

' Multiplication function. Forwards if subtraction is defined for
' both arguments.
(def i_*(a, b)
    => a(\*\)(b) ; sys:defined((a onlyIf isObject(a))(\*\))
                && sys:defined((b onlyIf isObject(b))(\*\))
    => sys:__mul__(a, b) ; 1
)

' Division function. Forwards if subtraction is defined for
' both arguments.
(def i_/(a, b)
    => a(\/\)(b) ; sys:defined((a onlyIf isObject(a))(\/\))
                && sys:defined((b onlyIf isObject(b))(\/\))
    => sys:__div__(a, b) ; 1
)

' Remainder function. Forwards if remainder is defined for
' both arguments.
(def i_%(a, b)
    => a(\%\)(b) ; sys:defined((a onlyIf isObject(a))(\%\))
                && sys:defined((b onlyIf isObject(b))(\%\))
    => sys:__rem__(a, b) ; 1
)

' Exponentiation function. Forwards if exponentiation is defined
' for both arguments.
(def r_**(a, b)
    => a(\**\)(b) ; sys:defined((a onlyIf isObject(a))(\**\))
                 && sys:defined((b onlyIf isObject(b))(\**\))
    => sys:__pow__(a, b) ; 1
)

' Maps each element of the given object using the given mapping
' function.
(def i_map(obj, func) =>
    (obj onlyIf isObject(obj))(\map\)(func) else sys:__map__(obj, func)
)

' Maps each element of the given object to zero or more new values
' using the given mapping function.
(def i_flatmap(obj, func)
    => sys:call(\sys:cat, sys:__map__(obj, func)) ; sys:__eq__(sys:typeof(obj), "vect")
    => (obj onlyIf isObject(obj))(\flatmap\)(func) ; 1
)

' Filters the elements of the given object according to the given
' predicate.
(def i_filter(obj, func) =>
    (obj onlyIf isObject(obj))(\filter\)(func) else sys:__filter__(obj, func)
)

' Combines the elements of the given object according to the
' given fold function with the given initial value.
(def i_fold(obj, id, func) =>
    (obj onlyIf isObject(obj))(\fold\)(id, func) else sys:__fold__(obj, id, func)
)

' Concatenates the elements of the two objects.
(def i_++(obj1, obj2) =>
    (obj1 onlyIf isObject(obj1))(\++\)(obj2) else sys:cat(obj1, obj2)
)

' Returns the subsequence of obj from bgn (inclusive) to end (exclusive).
(def i_slice(obj, bgn, end) =>
    (obj onlyIf isObject(obj))(\slice\)(bgn, end) else sys:__slice__(obj, bgn, end)
)

' Returns whether the given element is contained in the given object.
(def i_in(el, obj)
    => _in_vect(el, obj, sys:__sub__(sys:__len__(obj), 1))
        ; sys:__eq__(sys:typeof(obj), "vect")
    => _in_str(el, obj, sys:__sub__(sys:__len__(obj), sys:__len__(el)), sys:__len__(el))
        ; sys:__eq__(sys:typeof(obj), "string")
    => obj(\in\)(el) ; 1
)

' Returns !(el in obj).
def i_notin(el, obj) => !(el in obj)

' Implementation of in for vects.
(def _in_vect(el, obj, idx)
    => 0 ; sys:__lt__(idx, 0)
    => 1 ; obj(idx) = el ' Use the override of equals
    => _in_vect(el, obj, sys:__sub__(idx, 1)) ; 1
)

' Implementation of in for strings.
(def _in_str(el, obj, idx, elLen)
    => 0 ; sys:__lt__(idx, 0)
    => 1 ; sys:__eq__(sys:__slice__(obj, idx, sys:__add__(idx, elLen)), el)
    => _in_str(el, obj, sys:__sub__(idx, 1), elLen) ; 1
)

' Converts the given object to a vect.
(def i_toVect(obj)
    => obj ; sys:__eq__(sys:typeof(obj), "vect")
    => (obj onlyIf isObject(obj))(\toVect\) ; 1
)
